#
# Copyright 2024 tosit.io
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Sign Images with Cosign

on:
  workflow_run:
    workflows: ["Spark build multiple images template"]
    types:
      - completed
  workflow_dispatch:

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  # Only cancel in-progress jobs or runs for the current workflow - matches against branch & tags
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: write
  contents: read

jobs:
  sign-images:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [spark-base, spark, spark-py, spark-r]

    steps:
      - name: Checkout Repo ⚡️
        uses: actions/checkout@v4

      - name: Set up QEMU and Docker Buildx 📦
        uses: docker/setup-buildx-action@v3

      - name: Login to CI registry 🔐
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install syft for SBOM generation 📦
        uses: anchore/sbom-action/download-syft@v0.20.6

      - name: Install cosign 🔐
        run: |
          # Download and install cosign directly
          wget https://github.com/sigstore/cosign/releases/download/v2.1.1/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          cosign version

      - name: Generate cosign keypair 🔐
        run: |
          cosign generate-key-pair

      - name: Determine image tag 📝
        id: image-tag
        run: |
          # Use the same tag generation logic as the build process
          echo "tag=spark-3.5.1-scala-2.13-java-17-main" >> $GITHUB_OUTPUT

      - name: Pull image from CI registry 📥
        run: |
          docker pull ghcr.io/${{ matrix.image }}:${{ steps.image-tag.outputs.tag }}
          docker tag ghcr.io/${{ matrix.image }}:${{ steps.image-tag.outputs.tag }} ${{ matrix.image }}:${{ steps.image-tag.outputs.tag }}

      - name: Generate SBOM 📋
        run: |
          syft ${{ matrix.image }}:${{ steps.image-tag.outputs.tag }} -o spdx-json > ${{ matrix.image }}-${{ steps.image-tag.outputs.tag }}.sbom.json
          echo "✅ SBOM generated: ${{ matrix.image }}-${{ steps.image-tag.outputs.tag }}.sbom.json"

      - name: Sign image and attach SBOM 🔐
        run: |
          # Set up environment variables to handle TUF connectivity issues
          export COSIGN_EXPERIMENTAL=1
          export COSIGN_ROOT=https://tuf-repo-cdn.sigstore.dev
          export COSIGN_MIRROR=https://tuf-repo-cdn.sigstore.dev
          export COSIGN_REKOR_URL=https://rekor.sigstore.dev

          # Try offline signing first (skip TUF and transparency logs)
          echo "🔐 Attempting offline signing..."
          if cosign sign --yes --key cosign.key --tlog-upload=false ${{ matrix.image }}:${{ steps.image-tag.outputs.tag }}; then
            echo "✅ Image signed successfully (offline mode)"
          else
            echo "⚠️ Offline signing failed, trying with TUF..."

            # Try signing with SBOM attachment first
            echo "🔐 Signing image with SBOM attachment..."
            if cosign attest --yes --predicate ${{ matrix.image }}-${{ steps.image-tag.outputs.tag }}.sbom.json --type spdx --key cosign.key ${{ matrix.image }}:${{ steps.image-tag.outputs.tag }}; then
              echo "✅ SBOM attached successfully"
            else
              echo "⚠️ SBOM attachment failed, trying without SBOM..."
            fi

            # Sign the image (with retry logic for TUF connectivity issues)
            echo "🔐 Signing image..."
            for i in {1..3}; do
              if cosign sign --yes --key cosign.key ${{ matrix.image }}:${{ steps.image-tag.outputs.tag }}; then
                echo "✅ Image signed successfully on attempt $i"
                break
              else
                echo "⚠️ Signing attempt $i failed, retrying..."
                sleep 5
              fi
            done
          fi

      - name: Verify signature 🔍
        run: |
          cosign verify --key cosign.pub ${{ matrix.image }}:${{ steps.image-tag.outputs.tag }}
          echo "✅ Signature verified successfully"

      - name: Upload SBOM artifact 📤
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.image }}-${{ steps.image-tag.outputs.tag }}
          path: ${{ matrix.image }}-${{ steps.image-tag.outputs.tag }}.sbom.json
          retention-days: 90

      - name: Upload cosign artifacts 📤
        uses: actions/upload-artifact@v4
        with:
          name: cosign-${{ matrix.image }}-${{ steps.image-tag.outputs.tag }}
          path: |
            cosign.key
            cosign.pub
          retention-days: 90
